vars:pre-request {
  ADMIN_EMAIL: admin@questnutri.com
  NUTRITIONIST_PASSWORD: 123
  PATIENT_DOCUMENT_NUMBER: 00{{TEST}}
  PATIENT_PASSWORD: 123
  RESET_PASSWORD_TOKEN: 
  RESET_PASSWORD_NEW_PASSWORD: 123
  PATIENT_ID: 088b4efb-5c6e-4089-821d-4e0dae6ca1e1
  NUTRITIONIST_ID: 95de7397-21e2-4643-945c-62cf58c4d2b9
  PATIENT_ACCOUNT_NUMBER: 1
  ~NUTRITIONIST_EMAIL: test{{NUTRI_ACCOUNT_NUMBER}}@nutri.com
  ~PATIENT_EMAIL: test{{PATIENT_ACCOUNT_NUMBER}}@patient.com
}

script:pre-request {
  bru.setFunction = function (name, fn) {
      if (!bru._functions) {
          bru._functions = {}
      }
  
      bru._functions[name] = fn
  }
  
  bru.function = function (name, args) {
    if (!bru._functions || !bru._functions[name]) {
      throw new Error("Function '" + name + "' is not defined")
    }
    if (!Array.isArray(args)) args = [args]
    return bru._functions[name].apply(bru._functions, args)
  }
  
  bru.getFn = function (name) {
    if (!bru._functions || !bru._functions[name]) {
      throw new Error("Function '" + name + "' is not defined")
    }
    return function () {
      return bru._functions[name].apply(bru._functions, arguments)
    }
  }
  
  bru.setFunction("randomPhone", function() {
      const ddd = Math.floor(Math.random() * 90 + 10);
      const number = Math.floor(Math.random() * 90000000 + 10000000);
      return `+55 ${ddd} 9${number.toString().padStart(8, '0').slice(1, 9)}-${number.toString().slice(-4)}`;
  })
  
  bru.setFunction("randomCRN", function() {
      const x = Math.floor(Math.random() * 9) + 1;
      const y = Math.floor(Math.random() * 90000 + 10000);
      return `CRN-${x}/${y}`;
  })
  
  bru.setFunction("randomCPF", function() {
      const n = () => Math.floor(Math.random() * 10);
      return `${n()}${n()}${n()}.${n()}${n()}${n()}.${n()}${n()}${n()}-${n()}${n()}`;
  })
  
  bru.setFunction("randomMealName", function () {
      const names = [
          'Breakfast', 'Morning Snack', 'Brunch', 'Lunch', 'Afternoon Snack',
          'Dinner', 'Evening Snack', 'Pre-Workout Meal', 'Post-Workout Meal',
          'Light Meal', 'Family Dinner', 'Work Lunch', 'Chef Special',
          'Healthy Breakfast', 'Salad Bowl', 'Protein Shake', 'Fruit Snack',
          'Soup', 'Late Night Snack', 'Dessert'
      ];
      return names[Math.floor(Math.random() * names.length)];
  });
  
  bru.setFunction("randomInt", function (min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
  })
  
  bru.setFunction("pad2", function (n) {
      return n < 10 ? '0' + n : '' + n;
  })
  
  bru.setFunction("randomHour", function () {
      const hour = bru.function("randomInt", [6, 22]);
      const minute = bru.function("randomInt", [0, 59]);
      return `${this.pad2(hour)}:${this.pad2(minute)}`;
  })
  
  bru.setFunction("pickRandom", function (array) {
      return array[Math.floor(Math.random() * array.length)];
  })
  
  bru.setFunction("randomRepeatConfiguration", function (startDate) {
      // Provide various repeat configuration shapes
      const types = ['ONCE', 'DAILY', 'WEEKLY', 'WEEKDAYS', 'MONTHLY', 'MONTHLY_DATE'];
      const type = this.pickRandom(types);
  
      const baseStart = startDate ? new Date(startDate) : new Date();
      baseStart.setUTCHours(0, 0, 0, 0);
  
      switch (type) {
          case 'ONCE':
              // single date between startDate and +14 days
              const onceDate = new Date(baseStart);
              onceDate.setDate(onceDate.getDate() + this.randomInt(0, 14));
              return { type: 'ONCE', startDate: onceDate.toISOString() };
  
          case 'DAILY':
              // interval 1..3
              return { type: 'DAILY', interval: this.randomInt(1, 3), startDate: baseStart.toISOString() };
  
          case 'WEEKLY':
              // interval 1..2 and choose 1-3 weekdays (0=Sunday..6=Saturday)
              const daysCount = this.randomInt(1, 3);
              const daysOfWeek = [];
              while (daysOfWeek.length < daysCount) {
                  const d = this.randomInt(0, 6);
                  if (!daysOfWeek.includes(d)) daysOfWeek.push(d);
              }
              return { type: 'WEEKLY', interval: this.randomInt(1, 2), daysOfWeek, startDate: baseStart.toISOString() };
  
          case 'WEEKDAYS':
              return { type: 'WEEKDAYS', startDate: baseStart.toISOString() };
  
          case 'MONTHLY':
              // start date keeps day-of-month
              return { type: 'MONTHLY', startDate: baseStart.toISOString() };
  
          case 'MONTHLY_DATE':
              // pick a day of month 1..28
              return { type: 'MONTHLY_DATE', dayOfMonth: this.randomInt(1, 28), startDate: baseStart.toISOString() };
  
          default:
              return { type: 'ONCE', startDate: baseStart.toISOString() };
      }
  })
  
  bru.setFunction("mealsGenerator", function (mealCount, foodsPerMeal) {
      const available = bru.getVar("availableAliments") || [];
      const generatedMeals = [];
  
      // Use a base startDate if provided in vars to align repeat configs
      const baseStartDate = bru.getVar("generatedStartDate") || bru.getVar("startDate") || new Date().toISOString();
  
      for (let i = 0; i < mealCount; i++) {
          const meal = {
              name: this.randomMealName(),
              description: null,
              hour: this.randomHour(),
              repeatConfiguration: this.randomRepeatConfiguration(baseStartDate),
              foods: []
          };
  
          for (let j = 0; j < foodsPerMeal; j++) {
              let chosenAliment = null;
              if (Array.isArray(available) && available.length > 0) {
                  chosenAliment = this.pickRandom(available);
                  const chosenAlimentId = chosenAliment._id || chosenAliment.id || null;
                  bru.setVar("choosedAlimentId", chosenAlimentId);
  
                  // choose a portion from aliment object - try multiple known keys
                  let portions = [];
                  if (Array.isArray(chosenAliment.portions) && chosenAliment.portions.length > 0) {
                      portions = chosenAliment.portions;
                  } else if (Array.isArray(chosenAliment.availablePortions) && chosenAliment.availablePortions.length > 0) {
                      portions = chosenAliment.availablePortions;
                  } else if (Array.isArray(chosenAliment.portionsList) && chosenAliment.portionsList.length > 0) {
                      portions = chosenAliment.portionsList;
                  } else {
                      // fallback single portion string from aliment (or use default)
                      if (chosenAliment.portion) portions = [chosenAliment.portion];
                  }
  
                  // ensure at least one option exists (requirements guarantee this)
                  const chosenPortion = portions.length > 0 ? this.pickRandom(portions) : '100g';
  
                  const food = {
                      alimentId: chosenAlimentId,
                      quantity: `${this.randomInt(1, 3)}`,     // random small quantity as string
                      portion: chosenPortion,
                      description: null
                  };
                  meal.foods.push(food);
              } else {
                  // no available aliments: try reuse last chosen or set nulls
                  const lastChosen = bru.getVar("choosedAlimentId") || null;
                  const food = {
                      alimentId: lastChosen,
                      quantity: `${this.randomInt(1, 3)}`,
                      portion: '100g',
                      description: null
                  };
                  meal.foods.push(food);
              }
          }
  
          generatedMeals.push(meal);
      }
  
  
      return generatedMeals;
  })
  
}
